buildscript {
  ext.versions = [
    'springBoot'     : '1.5.7.RELEASE',
    'htmlunit'       : '2.47.0',
    'gson'           : '2.8.5',
    'jackson'        : '2.9.7',
    'mysqlConnector' : '8.0.23',
    'flyway'         : '5.2.4',
    'groovy'         : '2.5.8',
    'solr'           : '8.2.0'
  ]

  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${versions.springBoot}")
  }
}

plugins {
    id "org.flywaydb.flyway" version "5.2.4"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.topcoder.scraper'
version = '0.0.1'
sourceCompatibility = 1.8

repositories {
  mavenCentral()
}

dependencies {
  compile("org.springframework.boot:spring-boot-starter:${versions.springBoot}")
  compile("org.springframework.boot:spring-boot-starter-data-jpa:${versions.springBoot}")
  compile("org.springframework.boot:spring-boot-starter-logging:${versions.springBoot}")
  compile("org.springframework.boot:spring-boot-configuration-processor:${versions.springBoot}")
  compile("org.springframework.boot:spring-boot-starter-web:${versions.springBoot}")
  compile("org.springframework.boot:spring-boot-starter-security:${versions.springBoot}")
  compile("org.projectlombok:lombok:1.18.6")

  //compileOnly('org.projectlombok:lombok:1.18.6')
  //annotationProcessor('org.projectlombok:lombok:1.18.6')

  compile("net.sourceforge.htmlunit:htmlunit:${versions.htmlunit}")
  compile("com.google.code.gson:gson:${versions.gson}")
  compile("com.fasterxml.jackson.core:jackson-databind:${versions.jackson}")
  compile("com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}")
  compile("com.fasterxml.jackson.core:jackson-core:${versions.jackson}")

  compile("mysql:mysql-connector-java:${versions.mysqlConnector}")
  compile("org.flywaydb:flyway-core:${versions.flyway}")

  compile("org.codehaus.groovy:groovy:${versions.groovy}")
  compile("org.codehaus.groovy:groovy-bsf:${versions.groovy}")
  compile("org.codehaus.groovy:groovy-groovysh:${versions.groovy}")

  compile("org.apache.solr:solr-solrj:${versions.solr}")
  compile("commons-codec:commons-codec:1.13")


  testCompile("org.springframework.boot:spring-boot-starter-test:${versions.springBoot}")
}

task wrapper(type: Wrapper) {
  gradleVersion = '3.5'
}

compileJava {
  options.warnings    = true
  options.deprecation = true
}

flyway {
  url = "jdbc:mysql://localhost:3306/web_scraper"
  user = "root"
  password = "mypassword"
  schemas = ["web_scraper"]
}

task copyJar(type: Copy) {
  from jar
  into '../web-scraper-k8s/scraper/libs'
}
build.dependsOn copyJar

// Setting secret key for application encrypt / decrypt
def secretKeyPlaceHolder   = "{{SECRET_KEY}}"
def secretKey              = "YPLxRKc2cWpLiJZi" // default value
def secretKeyConfirmation  = ""
def SECRET_KEY_TRIAL_MAX   = 5
compileJava.doFirst {
  println("compileJava first task: replace " + secretKeyPlaceHolder + ".")

  // ./gradlew build -Psecret
  if (project.hasProperty('secret')) {
    for (i in 1..SECRET_KEY_TRIAL_MAX) {
      sleep(1000) // for correct console output below
      secretKey               = String.valueOf(System.console().readPassword("\nPlease enter secret key: "))
      sleep(1000) // for correct console output below
      secretKeyConfirmation   = String.valueOf(System.console().readPassword("\nPlease enter secret key again: "))
      if (secretKey == secretKeyConfirmation) {
        break
      } else {
        println("Entered values don't match each other.")
        if (i >= SECRET_KEY_TRIAL_MAX) {
          throw new GradleException("Trial count reached the maximum value ${i}. Exit Process.")
        }
        println("Please try again.")
      }
    }
  }

  // replace
  ant.replace(file: 'src/main/java/com/topcoder/common/util/CipherUtils.java', token: secretKeyPlaceHolder, value: secretKey)
}
compileJava.doLast {
  println("compileJava last task: replace back.")
  // replace back
  ant.replace(file: 'src/main/java/com/topcoder/common/util/CipherUtils.java', token: secretKey, value: secretKeyPlaceHolder)
}

bootRun {
  // with Parameters
  // Usage:
  //   ./gradlew bootRun -Pargs=--batch=purchase_history
  //   ./gradlew bootRun -Pargs="--batch=purchase_history,--site=amazon"
  if (project.hasProperty('args')) {
    args project.args.split(',')
  }
  // with JVM Parameters
  // Usage:
  //   ./gradlew bootRun -PjvmArgs=-DtacticFile=tactic_01.yaml -Pargs=--rest
  //   ./gradlew bootRun -PjvmArgs=-DtacticFile=tactic_01.yaml -Pargs=--batch=purchase_history
  //   ./gradlew bootRun -PjvmArgs="-DtacticFile=tactic_01.yaml,-DmonitorTargetFile=monitor-target_01.yaml,-DcheckItemsFile=check-items_01.yaml" -Pargs=--batch=change_detection_check
  if ( project.hasProperty('jvmArgs') ) {
    jvmArgs project.jvmArgs.split(',')
  }
}

// groovy shell
//   Usage: ./gradlew --no-daemon --console=plain groovysh
task(groovysh, dependsOn: 'classes', type: JavaExec) {
  main = 'org.codehaus.groovy.tools.shell.Main'
  args = ['scripts/scraping/dev_support.groovy']

  classpath = sourceSets.main.runtimeClasspath
  standardInput = System.in
}
